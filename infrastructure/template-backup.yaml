AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SharpCRM Infrastructure
  
  Complete serverless backend with Lambda functions, API Gateway, and DynamoDB

# Global configuration for all resources
Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    MemorySize: 512
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        REGION: !Ref AWS::Region
        USERS_TABLE: !Ref UsersTable
        REFRESH_TOKENS_TABLE: !Ref RefreshTokensTable
        CONTACTS_TABLE: !Ref ContactsTable
        LEADS_TABLE: !Ref LeadsTable
        DEALS_TABLE: !Ref DealsTable
        TASKS_TABLE: !Ref TasksTable
        SUBSIDIARIES_TABLE: !Ref SubsidiariesTable
        DEALERS_TABLE: !Ref DealersTable
        NOTIFICATIONS_TABLE: !Ref NotificationsTable
        REPORTS_TABLE: !Ref ReportsTable
        JWT_SECRET: !Ref JWTSecret
        JWT_REFRESH_SECRET: !Ref JWTRefreshSecret
        SUPER_ADMIN_EMAIL: "rootuser@sharp.com"
        SUPER_ADMIN_PASSWORD: "User@123"
        SUPER_ADMIN_FIRST_NAME: "Root"
        SUPER_ADMIN_LAST_NAME: "User"
        SUPER_ADMIN_ROLE: "SUPER_ADMIN"
        SUPER_ADMIN_TENANT_ID: "SUPER_ADMIN_TENANT"
        SUPER_ADMIN_CREATED_BY: "SYSTEM"
        FRONTEND_URL: "https://d9xj0evv3ouwa.cloudfront.net"
        FRONTEND_URL_ALT_1: "http://localhost:5174"
        FRONTEND_URL_ALT_2: "http://localhost:5175"
  Api:
    Cors:
      AllowMethods:
        - DELETE
        - GET
        - HEAD
        - OPTIONS
        - PATCH
        - POST
        - PUT
      AllowHeaders:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
      AllowOrigin:
        - https://d9xj0evv3ouwa.cloudfront.net
      AllowCredentials: true
      MaxAge: 600
    GatewayResponses:
      DEFAULT_4XX:
        ResponseParameters:
          Headers:
            Access-Control-Allow-Origin: "'https://d9xj0evv3ouwa.cloudfront.net'"
            Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            Access-Control-Allow-Credentials: "'true'"
      DEFAULT_5XX:
        ResponseParameters:
          Headers:
            Access-Control-Allow-Origin: "'https://d9xj0evv3ouwa.cloudfront.net'"
            Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            Access-Control-Allow-Credentials: "'true'"

# Parameters allow you to customize the deployment
Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment name
  
  TablePrefix:
    Type: String
    Default: SharpCRM
    Description: Prefix for table names
  
  JWTSecret:
    Type: String
    Default: "your-super-secret-jwt-key-change-this-in-production"
    Description: JWT Secret for token signing
    NoEcho: true
  
  JWTRefreshSecret:
    Type: String
    Default: "your-super-secret-jwt-refresh-key-change-this-in-production"
    Description: JWT Refresh Secret for refresh token signing
    NoEcho: true

# Resources define the AWS infrastructure
Resources:
  # Main Backend Lambda Function
  BackendFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${TablePrefix}-Backend-${Environment}"
      CodeUri: ../backend/
      Handler: dist/lambda.handler
      Runtime: nodejs18.x
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          REGION: !Ref AWS::Region
          USERS_TABLE: !Ref UsersTable
          REFRESH_TOKENS_TABLE: !Ref RefreshTokensTable
          CONTACTS_TABLE: !Ref ContactsTable
          LEADS_TABLE: !Ref LeadsTable
          DEALS_TABLE: !Ref DealsTable
          TASKS_TABLE: !Ref TasksTable
          SUBSIDIARIES_TABLE: !Ref SubsidiariesTable
          DEALERS_TABLE: !Ref DealersTable
          NOTIFICATIONS_TABLE: !Ref NotificationsTable
          REPORTS_TABLE: !Ref ReportsTable
          JWT_SECRET: !Ref JWTSecret
          JWT_REFRESH_SECRET: !Ref JWTRefreshSecret
          SUPER_ADMIN_EMAIL: "rootuser@sharp.com"
          SUPER_ADMIN_PASSWORD: "User@123"
          SUPER_ADMIN_FIRST_NAME: "Root"
          SUPER_ADMIN_LAST_NAME: "User"
          SUPER_ADMIN_ROLE: "SUPER_ADMIN"
          SUPER_ADMIN_TENANT_ID: "SUPER_ADMIN_TENANT"
          SUPER_ADMIN_CREATED_BY: "SYSTEM"
          FRONTEND_URL: "https://d9xj0evv3ouwa.cloudfront.net"
          FRONTEND_URL_ALT_1: "http://localhost:5174"
          FRONTEND_URL_ALT_2: "http://localhost:5175"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref BackendApi
        HealthCheck:
          Type: Api
          Properties:
            Path: /health
            Method: GET
            RestApiId: !Ref BackendApi
      FunctionUrlConfig:
        AuthType: NONE
        Cors:
          AllowCredentials: true
          AllowMethods:
            - GET
            - POST
            - PUT
            - DELETE
            - PATCH
          AllowHeaders:
            - Content-Type
            - Authorization
            - X-Amz-Date
            - X-Api-Key
            - X-Amz-Security-Token
          AllowOrigins:
            - "https://d9xj0evv3ouwa.cloudfront.net"
            - "http://localhost:5173"
            - "http://localhost:5174"
            - "http://localhost:5175"
          MaxAge: 600
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RefreshTokensTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ContactsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref LeadsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DealsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SubsidiariesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DealersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ReportsTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
            - Effect: Allow
              Action:
                - dynamodb:ListTables
                - dynamodb:DescribeTable
              Resource: '*'

  # API Gateway
  BackendApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${TablePrefix}-API-${Environment}"
      StageName: !Ref Environment
      Cors:
        AllowMethods:
          - DELETE
          - GET
          - HEAD
          - PATCH
          - POST
          - PUT
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
        AllowOrigin:
          - https://d9xj0evv3ouwa.cloudfront.net
        AllowCredentials: true
        MaxAge: 600
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'https://d9xj0evv3ouwa.cloudfront.net'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Credentials: "'true'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'https://d9xj0evv3ouwa.cloudfront.net'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Credentials: "'true'"

  # Database Initialization Lambda (one-time)
  DatabaseInitFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${TablePrefix}-DatabaseInit-${Environment}"
      CodeUri: ../backend/
      Handler: dist/handlers/initDatabaseHandler.handler
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 120
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          REGION: !Ref AWS::Region
          USERS_TABLE: !Ref UsersTable
          REFRESH_TOKENS_TABLE: !Ref RefreshTokensTable
          SUPER_ADMIN_EMAIL: "rootuser@sharp.com"
          SUPER_ADMIN_PASSWORD: "User@123"
          SUPER_ADMIN_FIRST_NAME: "Root"
          SUPER_ADMIN_LAST_NAME: "User"
          SUPER_ADMIN_ROLE: "SUPER_ADMIN"
          SUPER_ADMIN_TENANT_ID: "SUPER_ADMIN_TENANT"
          SUPER_ADMIN_CREATED_BY: "SYSTEM"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RefreshTokensTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  # Token Cleanup Lambda (scheduled)
  TokenCleanupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${TablePrefix}-TokenCleanup-${Environment}"
      CodeUri: ../backend/
      Handler: dist/lambda.tokenCleanupHandler
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          REGION: !Ref AWS::Region
          REFRESH_TOKENS_TABLE: !Ref RefreshTokensTable
      Events:
        ScheduledCleanup:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
            Description: "Daily cleanup of expired refresh tokens"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RefreshTokensTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  # Users Table
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${TablePrefix}-Users-${Environment}"
      BillingMode: PAY_PER_REQUEST  # On-demand pricing
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH  # Partition key
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: SharpCRM
        - Key: Component
          Value: Database

  # Refresh Tokens Table
  RefreshTokensTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${TablePrefix}-RefreshTokens-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: jti
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: jti
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserTokensIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      # TTL for automatic cleanup of expired tokens
      TimeToLiveSpecification:
        AttributeName: expiresAt
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: SharpCRM
        - Key: Component
          Value: Authentication

  # Contacts Table
  ContactsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${TablePrefix}-Contacts-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: tenantId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TenantIndex
          KeySchema:
            - AttributeName: tenantId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: SharpCRM
        - Key: Component
          Value: CRM

  # Leads Table
  LeadsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${TablePrefix}-Leads-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: tenantId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TenantIndex
          KeySchema:
            - AttributeName: tenantId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: SharpCRM
        - Key: Component
          Value: CRM

  # Deals Table
  DealsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${TablePrefix}-Deals-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: tenantId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TenantIndex
          KeySchema:
            - AttributeName: tenantId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: SharpCRM
        - Key: Component
          Value: CRM

  # Tasks Table
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${TablePrefix}-Tasks-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: tenantId
          AttributeType: S
        - AttributeName: assignedTo
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TenantIndex
          KeySchema:
            - AttributeName: tenantId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: AssignedToIndex
          KeySchema:
            - AttributeName: assignedTo
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: SharpCRM
        - Key: Component
          Value: CRM

  # Subsidiaries Table
  SubsidiariesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${TablePrefix}-Subsidiaries-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: tenantId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TenantIndex
          KeySchema:
            - AttributeName: tenantId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: SharpCRM
        - Key: Component
          Value: CRM

  # Dealers Table
  DealersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${TablePrefix}-Dealers-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: tenantId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TenantIndex
          KeySchema:
            - AttributeName: tenantId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: SharpCRM
        - Key: Component
          Value: CRM

  # Notifications Table
  NotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${TablePrefix}-Notifications-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserNotificationsIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: SharpCRM
        - Key: Component
          Value: Notifications

  # Reports Table
  ReportsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${TablePrefix}-Reports-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: tenantId
          AttributeType: S
        - AttributeName: createdBy
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TenantIndex
          KeySchema:
            - AttributeName: tenantId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: CreatedByIndex
          KeySchema:
            - AttributeName: createdBy
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: SharpCRM
        - Key: Component
          Value: Reports

# Outputs provide information about the created resources
Outputs:
  UsersTableName:
    Description: "Name of the Users DynamoDB table"
    Value: !Ref UsersTable
    Export:
      Name: !Sub "${AWS::StackName}-UsersTableName"
  
  RefreshTokensTableName:
    Description: "Name of the RefreshTokens DynamoDB table"
    Value: !Ref RefreshTokensTable
    Export:
      Name: !Sub "${AWS::StackName}-RefreshTokensTableName"
  
  ContactsTableName:
    Description: "Name of the Contacts DynamoDB table"
    Value: !Ref ContactsTable
    Export:
      Name: !Sub "${AWS::StackName}-ContactsTableName"
  
  LeadsTableName:
    Description: "Name of the Leads DynamoDB table"
    Value: !Ref LeadsTable
    Export:
      Name: !Sub "${AWS::StackName}-LeadsTableName"
  
  DealsTableName:
    Description: "Name of the Deals DynamoDB table"
    Value: !Ref DealsTable
    Export:
      Name: !Sub "${AWS::StackName}-DealsTableName"
  
  TasksTableName:
    Description: "Name of the Tasks DynamoDB table"
    Value: !Ref TasksTable
    Export:
      Name: !Sub "${AWS::StackName}-TasksTableName"
  
  SubsidiariesTableName:
    Description: "Name of the Subsidiaries DynamoDB table"
    Value: !Ref SubsidiariesTable
    Export:
      Name: !Sub "${AWS::StackName}-SubsidiariesTableName"
  
  DealersTableName:
    Description: "Name of the Dealers DynamoDB table"
    Value: !Ref DealersTable
    Export:
      Name: !Sub "${AWS::StackName}-DealersTableName"
  
  NotificationsTableName:
    Description: "Name of the Notifications DynamoDB table"
    Value: !Ref NotificationsTable
    Export:
      Name: !Sub "${AWS::StackName}-NotificationsTableName"
  
  ReportsTableName:
    Description: "Name of the Reports DynamoDB table"
    Value: !Ref ReportsTable
    Export:
      Name: !Sub "${AWS::StackName}-ReportsTableName"
  
  # ARNs for IAM permissions
  UsersTableArn:
    Description: "ARN of the Users DynamoDB table"
    Value: !GetAtt UsersTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UsersTableArn"
  
  RefreshTokensTableArn:
    Description: "ARN of the RefreshTokens DynamoDB table"
    Value: !GetAtt RefreshTokensTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RefreshTokensTableArn"
  
  # API Gateway URL
  BackendApiUrl:
    Description: "API Gateway endpoint URL for the backend"
    Value: !Sub "https://${BackendApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub "${AWS::StackName}-BackendApiUrl"
  
  BackendFunctionArn:
    Description: "ARN of the Backend Lambda function"
    Value: !GetAtt BackendFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-BackendFunctionArn"
  
  TokenCleanupFunctionArn:
    Description: "ARN of the Token Cleanup Lambda function"
    Value: !GetAtt TokenCleanupFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TokenCleanupFunctionArn"
  
  BackendFunctionUrl:
    Description: "Lambda Function URL for direct access (bypasses API Gateway)"
    Value: !GetAtt BackendFunctionUrl.FunctionUrl
    Export:
      Name: !Sub "${AWS::StackName}-BackendFunctionUrl"
