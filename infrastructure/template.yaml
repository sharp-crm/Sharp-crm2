AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SharpCRM Infrastructure (Simplified)
  
  Serverless backend with Lambda functions and API Gateway
  Database tables will be created manually using npm run init-db:global

# Global configuration for all resources
Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    MemorySize: 512
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        REGION: !Ref AWS::Region
        # Table names will be generated by init-db:global script
        TABLE_PREFIX: !Ref TablePrefix
        JWT_SECRET: !Ref JWTSecret
        JWT_REFRESH_SECRET: !Ref JWTRefreshSecret
        SUPER_ADMIN_EMAIL: "rootuser@sharp.com"
        SUPER_ADMIN_PASSWORD: "User@123"
        SUPER_ADMIN_FIRST_NAME: "Root"
        SUPER_ADMIN_LAST_NAME: "User"
        SUPER_ADMIN_ROLE: "SUPER_ADMIN"
        SUPER_ADMIN_TENANT_ID: "SUPER_ADMIN_TENANT"
        SUPER_ADMIN_CREATED_BY: "SYSTEM"
        FRONTEND_URL: "https://d9xj0evv3ouwa.cloudfront.net"
        FRONTEND_URL_ALT_1: "http://localhost:5174"
        FRONTEND_URL_ALT_2: "http://localhost:5175"
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS,PATCH,HEAD'"
      AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'https://d9xj0evv3ouwa.cloudfront.net'"
      AllowCredentials: true
      MaxAge: 600
    GatewayResponses:
      DEFAULT_4XX:
        ResponseParameters:
          Headers:
            Access-Control-Allow-Origin: "'https://d9xj0evv3ouwa.cloudfront.net'"
            Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            Access-Control-Allow-Credentials: "'true'"
      DEFAULT_5XX:
        ResponseParameters:
          Headers:
            Access-Control-Allow-Origin: "'https://d9xj0evv3ouwa.cloudfront.net'"
            Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            Access-Control-Allow-Credentials: "'true'"

# Parameters allow you to customize the deployment
Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment name
  
  TablePrefix:
    Type: String
    Default: SharpCRM
    Description: Prefix for table names
  
  JWTSecret:
    Type: String
    Default: "your-super-secret-jwt-key-change-this-in-production"
    Description: JWT Secret for token signing
    NoEcho: true
  
  JWTRefreshSecret:
    Type: String
    Default: "your-super-secret-jwt-refresh-key-change-this-in-production"
    Description: JWT Refresh Secret for refresh token signing
    NoEcho: true
  
  DomainName:
    Type: String
    Default: "sharpcrm.com"
    Description: The domain name for the application
  
  SubDomainName:
    Type: String
    Default: "app"
    Description: The subdomain for the frontend application

# Resources define the AWS infrastructure
Resources:
  # Main Backend Lambda Function
  BackendFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${TablePrefix}-Backend-${Environment}"
      CodeUri: ../backend/dist
      Handler: lambda-entrypoint.handler
      Runtime: nodejs18.x
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          # Basic Configuration
          NODE_ENV: !Ref Environment
          REGION: !Ref AWS::Region
          
          # JWT Configuration
          JWT_SECRET: !Ref JWTSecret
          JWT_REFRESH_SECRET: !Ref JWTRefreshSecret
          ACCESS_TOKEN_EXPIRY: "180m"
          REFRESH_TOKEN_EXPIRY: "7d"
          REFRESH_THRESHOLD: "300000"
          
          # Frontend URLs for CORS
          FRONTEND_URL: "https://d9xj0evv3ouwa.cloudfront.net"
          FRONTEND_URL_ALT_1: "http://localhost:5174"
          FRONTEND_URL_ALT_2: "http://localhost:5175"
          FRONTEND_DEV_URL: "http://localhost:5173"
          FRONTEND_DEV_URL_ALT_1: "http://localhost:5174"
          
          # DynamoDB Table Names (matching your .env structure)
          USERS_TABLE: !Sub "${TablePrefix}-Users-${Environment}"
          USERS_TABLE_NAME: !Sub "${TablePrefix}-Users-${Environment}"
          CONTACTS_TABLE: !Sub "${TablePrefix}-Contacts-${Environment}"
          LEADS_TABLE: !Sub "${TablePrefix}-Leads-${Environment}"
          DEALS_TABLE: !Sub "${TablePrefix}-Deals-${Environment}"
          TASKS_TABLE: !Sub "${TablePrefix}-Tasks-${Environment}"
          SUBSIDIARIES_TABLE: !Sub "${TablePrefix}-Subsidiaries-${Environment}"
          DEALERS_TABLE: !Sub "${TablePrefix}-Dealers-${Environment}"
          NOTIFICATIONS_TABLE: !Sub "${TablePrefix}-Notifications-${Environment}"
          REPORTS_TABLE: !Sub "${TablePrefix}-Reports-${Environment}"
          REFRESH_TOKENS_TABLE: !Sub "${TablePrefix}-RefreshTokens-${Environment}"
          REFRESH_TOKENS_TABLE_NAME: !Sub "${TablePrefix}-RefreshTokens-${Environment}"
          EMAIL_HISTORY_TABLE: !Sub "${TablePrefix}-EmailHistory-${Environment}"
          
          # Super Admin Configuration
          SUPER_ADMIN_EMAIL: "rootuser@sharp.com"
          SUPER_ADMIN_PASSWORD: "User@123"
          SUPER_ADMIN_FIRST_NAME: "Root"
          SUPER_ADMIN_LAST_NAME: "User"
          SUPER_ADMIN_ROLE: "SUPER_ADMIN"
          SUPER_ADMIN_TENANT_ID: "SUPER_ADMIN_TENANT"
          SUPER_ADMIN_CREATED_BY: "SYSTEM"
          
          # DynamoDB Configuration
          DYNAMODB_LOCAL: "false"
          DYNAMODB_RETRY_COUNT: "3"
          DYNAMODB_RETRY_DELAY: "2000"
          
          # Database Configuration
          DB_RETRY_COUNT: "5"
          DB_RETRY_DELAY: "3000"
          
          # Express Configuration
          JSON_LIMIT: "50mb"
          URLENCODED_LIMIT: "50mb"
          
          # Socket.IO Configuration
          TYPING_TIMEOUT: "3000"
          
          # Logging
          LOG_LEVEL: "info"

          #Email Lambda Function
          EMAIL_LAMBDA_FUNCTION_NAME: !Ref EmailServiceFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref BackendApi
        ApiOptionsEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: OPTIONS
            RestApiId: !Ref BackendApi
        HealthCheck:
          Type: Api
          Properties:
            Path: /health
            Method: GET
            RestApiId: !Ref BackendApi
        HealthCheckOptions:
          Type: Api
          Properties:
            Path: /health
            Method: OPTIONS
            RestApiId: !Ref BackendApi
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Sub "${TablePrefix}-Users-${Environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "${TablePrefix}-RefreshTokens-${Environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "${TablePrefix}-Contacts-${Environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "${TablePrefix}-Leads-${Environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "${TablePrefix}-Deals-${Environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "${TablePrefix}-Tasks-${Environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "${TablePrefix}-Subsidiaries-${Environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "${TablePrefix}-Dealers-${Environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "${TablePrefix}-Notifications-${Environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "${TablePrefix}-Reports-${Environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "${TablePrefix}-EmailHistory-${Environment}"
        - DynamoDBCrudPolicy:
            TableName: Users
        - DynamoDBCrudPolicy:
            TableName: RefreshTokens
        - DynamoDBCrudPolicy:
            TableName: AuthUsers
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:ListTables
                - dynamodb:DescribeTable
              Resource: "*"
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Scan
                - dynamodb:BatchGetItem
                - dynamodb:BatchWriteItem
                - dynamodb:ConditionCheckItem
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*/stream/*"
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt EmailServiceFunction.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
                - ses:GetSendQuota
                - ses:GetSendStatistics
              Resource: '*'

  # Email Service Lambda Function
  EmailServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${TablePrefix}-EmailService-${Environment}"
      CodeUri: ../backend/dist
      Handler: emailLambda.handler
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          EMAIL_HISTORY_TABLE: !Sub "${TablePrefix}-EmailHistory-${Environment}"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
                - ses:GetSendQuota
                - ses:GetSendStatistics
              Resource: '*'
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TablePrefix}-EmailHistory-${Environment}"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TablePrefix}-EmailHistory-${Environment}/index/*"
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  # API Gateway
  BackendApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${TablePrefix}-API-${Environment}"
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS,PATCH,HEAD'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'https://d9xj0evv3ouwa.cloudfront.net'"
        AllowCredentials: true
        MaxAge: 600
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'https://d9xj0evv3ouwa.cloudfront.net'"
              Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              Access-Control-Allow-Credentials: "'true'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'https://d9xj0evv3ouwa.cloudfront.net'"
              Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              Access-Control-Allow-Credentials: "'true'"

  # Token Cleanup Lambda (scheduled) - Optional, can be removed if not needed
  TokenCleanupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${TablePrefix}-TokenCleanup-${Environment}"
      CodeUri: ../backend/dist
      Handler: lambda.tokenCleanupHandler
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 60
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          REGION: !Ref AWS::Region
          TABLE_PREFIX: !Ref TablePrefix
      Events:
        ScheduledCleanup:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
            Description: "Daily cleanup of expired refresh tokens"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:DeleteItem
                - dynamodb:Scan
              Resource: 
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TablePrefix}-RefreshTokens-${Environment}"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TablePrefix}-RefreshTokens-${Environment}/index/*"
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'


# Outputs provide information about the created resources
Outputs:
  # API Gateway URL
  BackendApiUrl:
    Description: "API Gateway endpoint URL for the backend"
    Value: !Sub "https://${BackendApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub "${AWS::StackName}-BackendApiUrl"
  
  BackendFunctionArn:
    Description: "ARN of the Backend Lambda function"
    Value: !GetAtt BackendFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-BackendFunctionArn"
  
  EmailServiceFunctionArn:
    Description: "ARN of the Email Service Lambda function"
    Value: !GetAtt EmailServiceFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EmailServiceFunctionArn"
  
  
  Environment:
    Description: "Deployment environment"
    Value: !Ref Environment
    Export:
      Name: !Sub "${AWS::StackName}-Environment"
  
  TablePrefix:
    Description: "Table prefix for DynamoDB tables"
    Value: !Ref TablePrefix
    Export:
      Name: !Sub "${AWS::StackName}-TablePrefix"

